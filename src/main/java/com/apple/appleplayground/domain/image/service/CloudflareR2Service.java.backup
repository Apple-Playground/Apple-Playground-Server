package com.apple.appleplayground.domain.image.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.DeleteObjectRequest;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;

import java.io.IOException;
import java.net.URI;

/**
 * Cloudflare R2 스토리지 서비스
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class CloudflareR2Service {
    
    @Value("${cloudflare.r2.access-key}")
    private String accessKey;
    
    @Value("${cloudflare.r2.secret-key}")
    private String secretKey;
    
    @Value("${cloudflare.r2.bucket-name}")
    private String bucketName;
    
    @Value("${cloudflare.r2.endpoint}")
    private String endpoint;
    
    @Value("${cloudflare.r2.public-url}")
    private String publicUrl;
    
    /**
     * 파일 업로드
     */
    public String uploadFile(MultipartFile file, String fileName) throws IOException {
        S3Client s3Client = createS3Client();
        
        try {
            PutObjectRequest putObjectRequest = PutObjectRequest.builder()
                    .bucket(bucketName)
                    .key(fileName)
                    .contentType(file.getContentType())
                    .contentLength(file.getSize())
                    .build();
            
            s3Client.putObject(putObjectRequest, RequestBody.fromInputStream(file.getInputStream(), file.getSize()));
            
            String fileUrl = publicUrl + "/" + fileName;
            log.info("File uploaded to R2: {}", fileUrl);
            
            return fileUrl;
            
        } finally {
            s3Client.close();
        }
    }
    
    /**
     * 파일 삭제
     */
    public void deleteFile(String fileName) {
        S3Client s3Client = createS3Client();
        
        try {
            DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()
                    .bucket(bucketName)
                    .key(fileName)
                    .build();
            
            s3Client.deleteObject(deleteObjectRequest);
            log.info("File deleted from R2: {}", fileName);
            
        } finally {
            s3Client.close();
        }
    }
    
    /**
     * S3Client 생성
     */
    private S3Client createS3Client() {
        AwsBasicCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);
        
        return S3Client.builder()
                .region(Region.US_EAST_1) // Cloudflare R2는 auto region 사용
                .credentialsProvider(StaticCredentialsProvider.create(credentials))
                .endpointOverride(URI.create(endpoint))
                .build();
    }
}
